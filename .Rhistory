# initialize new numerical normalized data frame
kickstarter.norm.df <- kickstarter.df %>% select(total_days, goal, successful)
# partition new data
train.index <- sample(1:nrow(kickstarter.norm.df), 0.6*nrow(kickstarter.norm.df))
train.df <- kickstarter.norm.df[train.index, ]
valid.df <- kickstarter.norm.df[-train.index,]
class(train.df$total_days)
############################# KNN analysis ###################################
# initialize new numerical normalized data frame
kickstarter.norm.df <- kickstarter.df %>% select(total_days, goal, successful)
# partition new data
train.index <- sample(1:nrow(kickstarter.norm.df), 0.6*nrow(kickstarter.norm.df))
train.df <- kickstarter.norm.df[train.index, ]
valid.df <- kickstarter.norm.df[-train.index,]
new.df <- data.frame(category = "Food", country = "US", total_days = 30, goal = 5000)
# initialize normalized training, validation data
train.norm.df <- train.df
valid.norm.df <- valid.df
# normalize predictors
norm.values <- preProcess(train.df[, 1:2], method=c("center", "scale"))
train.norm.df[, 1:2] <- predict(norm.values, train.df[, 1:2])
valid.norm.df[, 1:2] <- predict(norm.values, valid.df[, 1:2])
kickstarter.norm.df[, 1:2] <- predict(norm.values, kickstarter.norm.df[, 1:2])
new.norm.df <- predict(norm.values, new.df)
# initialize a data frame with two columns: k, and accuracy.
accuracy.df <- data.frame(k = 1:10, accuracy = rep(0, 10))
# compute knn for different k on validation.
for(i in 1:10) {
knn.pred <- knn(train.norm.df[, 1:2], valid.norm.df[, 1:2],
cl = train.norm.df[, 3], k = i)
confusionMatrix(knn.pred, valid.norm.df[, 3])
accuracy.df[i, 2] <- confusionMatrix(knn.pred, valid.norm.df[, 3])$overall[1]
}
accuracy.df
View(valid.norm.df)
kickstarter.lm <- lm(successful~., data = train.df)
options(scipen = 999)
summary(kickstarter.lm)
# make predictions on a new set.
kickstarter.lm.pred <- predict(kickstarter.lm, valid.df)
options(scipen = 999, digits = 3)
accuracy(kickstarter.lm.pred, valid.df$successful)
options(scipen=999, digits = 0)
# get the residuals
all.residuals <- valid.df$successful - kickstarter.lm.pred
hist(all.residuals, breaks = 25, xlab = "Residuals")
source('~/Desktop/IS451/IS451-Kickstarter/processdata.R')
library(ggplot2)
library(data.table)
library(dplyr)
library("lubridate")
library(caret)
library(rpart)
library(rpart.plot)
kickstarter.df <- fread("ks-projects-201801.csv")
# change launched and dealine to date format
kickstarter.df$deadline <- ymd(kickstarter.df$deadline)
kickstarter.df$launched <- ymd_hms(kickstarter.df$launched)
kickstarter.df$launched <- as.Date(kickstarter.df$launched)
# create target column
kickstarter.df$successful <- ifelse(kickstarter.df$state == "successful", 1, 0)
# select and format relevant variables
kickstarter.full.df <- kickstarter.df %>% mutate("total_days" = deadline - launched) %>%
select(name, main_category, country, launched, deadline, total_days, usd_pledged_real, usd_goal_real, backers, state, successful) %>%
rename(category = main_category, pledged = usd_pledged_real, goal = usd_goal_real)
# create data frame with only predictor variables
kickstarter.df <- kickstarter.full.df %>% select(category, country, total_days, goal, successful)
kickstarter.df$total_days <- as.numeric(kickstarter.df$total_days, units="days")
# partition data
set.seed(1)
train.index <- sample(1:nrow(kickstarter.df), nrow(kickstarter.df)*0.6)
train.df <- kickstarter.df[train.index, ]
valid.df <- kickstarter.df[-train.index, ]
################################# ggplots #####################################
country_plot <- ggplot(data = kickstarter.full.df) +
geom_point(aes(x = pledged, y = country, color = country))
category_plot <- ggplot(data = kickstarter.full.df) +
geom_point(aes(x = pledged, y = category, color = category))
########################## classification trees ################################
# default classification tree, optimized by pruning
default.ct <- rpart(successful ~ ., data = train.df, method = "class")
# plot tree
tree <- prp(default.ct, type = 1, extra = 1, varlen = -10)
# classification accuracy measure of the default tree
default.ct.point.pred <- predict(default.ct, valid.df, type = "class")
# generate confusion matrix for validation data
confusionMatrix(default.ct.point.pred, factor(valid.df$successful))
####################### multiple linear regression ##############################
# linear regression of success on all 4 predictors in the training set
kickstarter.lm <- lm(successful~., data = train.df)
options(scipen = 999)
summary(kickstarter.lm)
# make predictions on a new set.
kickstarter.lm.pred <- predict(kickstarter.lm, valid.df)
options(scipen = 999, digits = 3)
accuracy(kickstarter.lm.pred, valid.df$successful)
options(scipen=999, digits = 0)
# get the residuals
all.residuals <- valid.df$successful - kickstarter.lm.pred
hist(all.residuals, breaks = 25, xlab = "Residuals")
############################ Logistic Regression #################################
setwd("~/Desktop/IS451/IS451-Kickstarter")
View(kickstarter.df)
View(kickstarter.df)
shiny::runApp()
runApp()
runApp()
runApp()
tree <- prp(default.ct, type = 1, extra = 1, varlen = -10)
default.ct.point.pred <- predict(default.ct, valid.df, type = "class")
# classification accuracy measure of the default tree
default.ct.point.pred <- predict(default.ct, valid.df, type = "class")
# generate confusion matrix for validation data
confusionMatrix(default.ct.point.pred, factor(valid.df$successful))
confusionMatrix(default.ct.point.pred, factor(valid.df$successful))
runApp()
country_plot
country_plot <- ggplot(data = kickstarter.full.df) +
geom_point(aes(x = pledged, y = country, color = country)) +
labs(title = "Top Countries")
category_plot <- ggplot(data = kickstarter.full.df) +
geom_point(aes(x = pledged, y = category, color = category)) +
labs(title = "Top Categories")
country_plot
View(kickstarter.df)
View(kickstarter.df)
category_plot
days_plot <- ggplot(data = kickstarter.full.df) +
geom_point(aes(x = pledged, y = days, color = category)) +
labs(title = "Time Period")
days_plot
days_plot <- ggplot(data = kickstarter.df) +
geom_point(aes(x = pledged, y = days, color = category)) +
labs(title = "Time Period")
days_plot
library(ggplot2)
library(data.table)
library(dplyr)
library(lubridate)
library(caret)
library(rpart)
library(rpart.plot)
library(forecast)
kickstarter.df <- fread("ks-projects-201801.csv")
# change launched and dealine to date format
kickstarter.df$deadline <- ymd(kickstarter.df$deadline)
kickstarter.df$launched <- ymd_hms(kickstarter.df$launched)
kickstarter.df$launched <- as.Date(kickstarter.df$launched)
kickstarter.df$total_days <- as.numeric(kickstarter.df$total_days, units="days")
# create target column
kickstarter.df$successful <- ifelse(kickstarter.df$state == "successful", 1, 0)
# select and format relevant variables
kickstarter.full.df <- kickstarter.df %>% mutate("total_days" = deadline - launched) %>%
select(name, main_category, country, launched, deadline, total_days, usd_pledged_real, usd_goal_real, backers, state, successful) %>%
rename(category = main_category, pledged = usd_pledged_real, goal = usd_goal_real)
# create data frame with only predictor variables
kickstarter.df <- kickstarter.full.df %>% select(category, country, total_days, goal, successful)
kickstarter.df$total_days <- as.numeric(kickstarter.df$total_days, units="days")
# partition data
set.seed(1)
train.index <- sample(1:nrow(kickstarter.df), nrow(kickstarter.df)*0.6)
train.df <- kickstarter.df[train.index, ]
valid.df <- kickstarter.df[-train.index, ]
################################# ggplots #####################################
country_plot <- ggplot(data = kickstarter.full.df) +
geom_point(aes(x = pledged, y = country, color = country)) +
labs(title = "Top Countries")
category_plot <- ggplot(data = kickstarter.full.df) +
geom_point(aes(x = pledged, y = category, color = category)) +
labs(title = "Top Categories")
days_plot <- ggplot(data = kickstarter.full.df) +
geom_point(aes(x = pledged, y = days, color = category)) +
labs(title = "Time Period")
days_plot
class(kickstarter.full.df$total_days)
days_plot <- ggplot(data = kickstarter.full.df) +
geom_point(aes(x = pledged, y = total_days, color = category)) +
labs(title = "Time Period")
days_plot
days_plot <- ggplot(data = kickstarter.full.df, aes(x=total_days, y=pledged, group=1)) +
geom_line() +
geom_point() +
labs(title = "Time Period")
library(ggplot2)
library(data.table)
library(dplyr)
library(lubridate)
library(caret)
library(rpart)
library(rpart.plot)
library(forecast)
kickstarter.df <- fread("ks-projects-201801.csv")
# change launched and dealine to date format
kickstarter.df$deadline <- ymd(kickstarter.df$deadline)
kickstarter.df$launched <- ymd_hms(kickstarter.df$launched)
kickstarter.df$launched <- as.Date(kickstarter.df$launched)
# create target column
kickstarter.df$successful <- ifelse(kickstarter.df$state == "successful", 1, 0)
# select and format relevant variables
kickstarter.full.df <- kickstarter.df %>% mutate("total_days" = deadline - launched) %>%
select(name, main_category, country, launched, deadline, total_days, usd_pledged_real, usd_goal_real, backers, state, successful) %>%
rename(category = main_category, pledged = usd_pledged_real, goal = usd_goal_real)
kickstarter.full.df$total_days <- as.numeric(kickstarter.full.df$total_days, units="days")
# create data frame with only predictor variables
kickstarter.df <- kickstarter.full.df %>% select(category, country, total_days, goal, successful)
# partition data
set.seed(1)
train.index <- sample(1:nrow(kickstarter.df), nrow(kickstarter.df)*0.6)
train.df <- kickstarter.df[train.index, ]
valid.df <- kickstarter.df[-train.index, ]
################################# ggplots #####################################
country_plot <- ggplot(data = kickstarter.full.df) +
geom_point(aes(x = pledged, y = country, color = country)) +
labs(title = "Top Countries")
category_plot <- ggplot(data = kickstarter.full.df) +
geom_point(aes(x = pledged, y = category, color = category)) +
labs(title = "Top Categories")
days_plot <- ggplot(data = kickstarter.full.df, aes(x=total_days, y=pledged, group=1)) +
geom_line() +
geom_point() +
labs(title = "Time Period")
days_plot
kickstarter.full.df <- kickstarter.df %>% mutate("total_days" = deadline - launched) %>%
select(name, main_category, country, launched, deadline, total_days, usd_pledged_real, usd_goal_real, backers, state, successful) %>%
rename(category = main_category, pledged = usd_pledged_real, goal = usd_goal_real) %>%
filter(total_days <= 2000)
library(ggplot2)
library(data.table)
library(dplyr)
library(lubridate)
library(caret)
library(rpart)
library(rpart.plot)
library(forecast)
kickstarter.df <- fread("ks-projects-201801.csv")
# change launched and dealine to date format
kickstarter.df$deadline <- ymd(kickstarter.df$deadline)
kickstarter.df$launched <- ymd_hms(kickstarter.df$launched)
kickstarter.df$launched <- as.Date(kickstarter.df$launched)
# create target column
kickstarter.df$successful <- ifelse(kickstarter.df$state == "successful", 1, 0)
# select and format relevant variables
kickstarter.full.df <- kickstarter.df %>% mutate("total_days" = deadline - launched) %>%
select(name, main_category, country, launched, deadline, total_days, usd_pledged_real, usd_goal_real, backers, state, successful) %>%
rename(category = main_category, pledged = usd_pledged_real, goal = usd_goal_real) %>%
filter(total_days <= 2000)
View(kickstarter.full.df)
View(kickstarter.full.df)
library(ggplot2)
library(data.table)
library(dplyr)
library(lubridate)
library(caret)
library(rpart)
library(rpart.plot)
library(forecast)
kickstarter.df <- fread("ks-projects-201801.csv")
# change launched and dealine to date format
kickstarter.df$deadline <- ymd(kickstarter.df$deadline)
kickstarter.df$launched <- ymd_hms(kickstarter.df$launched)
kickstarter.df$launched <- as.Date(kickstarter.df$launched)
# create target column
kickstarter.df$successful <- ifelse(kickstarter.df$state == "successful", 1, 0)
# select and format relevant variables
kickstarter.full.df <- kickstarter.df %>% mutate("total_days" = deadline - launched) %>%
select(name, main_category, country, launched, deadline, total_days, usd_pledged_real, usd_goal_real, backers, state, successful) %>%
rename(category = main_category, pledged = usd_pledged_real, goal = usd_goal_real) %>%
filter(total_days <= 500)
kickstarter.full.df$total_days <- as.numeric(kickstarter.full.df$total_days, units="days")
# create data frame with only predictor variables
kickstarter.df <- kickstarter.full.df %>% select(category, country, total_days, goal, successful)
# partition data
set.seed(1)
train.index <- sample(1:nrow(kickstarter.df), nrow(kickstarter.df)*0.6)
train.df <- kickstarter.df[train.index, ]
valid.df <- kickstarter.df[-train.index, ]
################################# ggplots #####################################
country_plot <- ggplot(data = kickstarter.full.df) +
geom_point(aes(x = pledged, y = country, color = country)) +
labs(title = "Top Countries")
category_plot <- ggplot(data = kickstarter.full.df) +
geom_point(aes(x = pledged, y = category, color = category)) +
labs(title = "Top Categories")
days_plot <- ggplot(data = kickstarter.full.df, aes(x=total_days, y=pledged, group=1)) +
geom_line() +
geom_point() +
labs(title = "Time Period")
days_plot
days_plot <- ggplot(data = kickstarter.full.df, aes(x=total_days, y=pledged, group=1)) +
geom_bar() +
labs(title = "Time Period")
days_plot
goal_plot <- ggplot(data = kickstarter.full.df, aes(goal)) +
geom_bar() +
labs(title = "Average Goal Sets")
goal_plot
day_plot <- ggplot(data = kickstarter.full.df, aes(day)) +
geom_bar() +
labs(title = "Average Days")
days_plot
day_plot
days_plot <- ggplot(data = kickstarter.full.df, aes(total_days)) +
geom_bar() +
labs(title = "Average Days")
days_plot
kickstarter.successful.df <- kickstarter.full.df %>% filter(successful == 1)
View(kickstarter.successful.df)
View(kickstarter.successful.df)
library(ggplot2)
library(data.table)
library(dplyr)
library(lubridate)
library(caret)
library(rpart)
library(rpart.plot)
library(forecast)
kickstarter.df <- fread("ks-projects-201801.csv")
# change launched and dealine to date format
kickstarter.df$deadline <- ymd(kickstarter.df$deadline)
kickstarter.df$launched <- ymd_hms(kickstarter.df$launched)
kickstarter.df$launched <- as.Date(kickstarter.df$launched)
# create target column
kickstarter.df$successful <- ifelse(kickstarter.df$state == "successful", 1, 0)
# select and format relevant variables
kickstarter.full.df <- kickstarter.df %>% mutate("total_days" = deadline - launched) %>%
select(name, main_category, country, launched, deadline, total_days, usd_pledged_real, usd_goal_real, backers, state, successful) %>%
rename(category = main_category, pledged = usd_pledged_real, goal = usd_goal_real) %>%
filter(total_days <= 500)
kickstarter.full.df$total_days <- as.numeric(kickstarter.full.df$total_days, units="days")
# create data frame with only predictor variables
kickstarter.df <- kickstarter.full.df %>% select(category, country, total_days, goal, successful)
# partition data
set.seed(1)
train.index <- sample(1:nrow(kickstarter.df), nrow(kickstarter.df)*0.6)
train.df <- kickstarter.df[train.index, ]
valid.df <- kickstarter.df[-train.index, ]
################################# ggplots #####################################
# plot of only successful kickstarters
kickstarter.successful.df <- kickstarter.full.df %>% filter(successful == 1)
country_plot <- ggplot(data = kickstarter.successful.df) +
geom_point(aes(x = pledged, y = country, color = country)) +
labs(title = "Top Countries")
category_plot <- ggplot(data = kickstarter.successful.df) +
geom_point(aes(x = pledged, y = category, color = category)) +
labs(title = "Top Categories")
days_plot <- ggplot(data = kickstarter.successful.df, aes(total_days)) +
geom_bar() +
labs(title = "Average Days")
goals_plot <- ggplot(data = kickstarter.successful.df, aes(goal)) +
geom_bar() +
labs(title = "Average Goals")
country_plot
category_plot
days_plot
goals_plot
category_plot2 <- ggplot(data = kickstarter.successful.df, aes(category)) +
geom_bar() +
labs(title = "Top Categories")
category_plot2
category_plot2 <- ggplot(data = kickstarter.successful.df, aes(category), position = position_stack(reverse = TRUE)) +
geom_bar() +
coord_flip() +
labs(title = "Top Categories")
category_plot2
kickstarter.successful.df <- kickstarter.full.df %>% filter(successful == 1)
country_plot <- ggplot(data = kickstarter.successful.df) +
geom_point(aes(x = pledged, y = country, color = country)) +
labs(title = "Country Funding")
country_plot2 <- ggplot(data = kickstarter.successful.df, aes(country), position = position_stack(reverse = TRUE)) +
geom_bar() +
coord_flip() +
labs(title = "Top Countries")
category_plot <- ggplot(data = kickstarter.successful.df) +
geom_point(aes(x = pledged, y = category, color = category)) +
labs(title = "Categories Funding")
category_plot2 <- ggplot(data = kickstarter.successful.df, aes(category), position = position_stack(reverse = TRUE)) +
geom_bar() +
coord_flip() +
labs(title = "Top Categories")
days_plot <- ggplot(data = kickstarter.successful.df, aes(total_days)) +
geom_bar() +
labs(title = "Average Days")
country_plot2
category_plot2
goals_plot
class(goal)
class(kickstarter.successful.df$goal)
days_plot
category_plot2 <- ggplot(data = subset(kickstarter.successful.df, total_days <= 50, total_days > 5), aes(category), position = position_stack(reverse = TRUE)) +
geom_bar() +
coord_flip() +
labs(title = "Top Categories")
days_plot
days_plot <- ggplot(data =  subset(kickstarter.successful.df, total_days <= 50, total_days > 5), aes(total_days)) +
geom_bar() +
labs(title = "Average Days")
days_plot
days_plot <- ggplot(data =  subset(kickstarter.successful.df, total_days <= 50, total_days > 10), aes(total_days)) +
geom_bar() +
labs(title = "Average Days")
days_plot
days_plot <- ggplot(data =  subset(kickstarter.successful.df, total_days <= 50, total_days > 10), aes(total_days)) +
geom_bar() +
labs(title = "Average Days")
days_plot
days_plot <- ggplot(data =  subset(kickstarter.successful.df, total_days <= 50 & total_days > 10), aes(total_days)) +
geom_bar() +
labs(title = "Average Days")
days_plot
runApp()
plot(confusionMatrix(default.ct.point.pred, factor(valid.df$successful)))
plot(confusionMatrix$table)
plot(confusionMatrix)
generate confusion matrix for validation data
confusionMatrix <-nconfusionMatrix(default.ct.point.pred, factor(valid.df$successful))
plot(confusionMatrix)
confusionMatrix <- confusionMatrix(default.ct.point.pred, factor(valid.df$successful))
plot(confusionMatrix)
View(confusionMatrix)
plot(confusionMatrix$table)
fourfoldplot(confusionMatrix$table)
confusionMatrix
source('~/Desktop/IS451/IS451-Kickstarter/processdata.R')
kickstarter.df <- fread("./Data/ks-projects-201801.csv")
kickstarter.df <- fread("../Data/ks-projects-201801.csv")
source('~/Desktop/IS451/IS451-Kickstarter/processdata.R')
accuracy(kickstarter.lm.pred, valid.df$successful)
kickstarter.lm <- lm(successful~., data = train.df)
summary(kickstarter.lm)
kickstarter.lm <- lm(successful~., data = train.df)
options(scipen = 999)
summary(kickstarter.lm)
# make predictions on a new set.
kickstarter.lm.pred <- predict(kickstarter.lm, valid.df)
options(scipen = 999, digits = 3)
accuracy(kickstarter.lm.pred, valid.df$successful)
options(scipen=999, digits = 0)
# get the residuals
all.residuals <- valid.df$successful - kickstarter.lm.pred
hist(all.residuals, breaks = 25, xlab = "Residuals")
library(ggplot2)
library(data.table)
library(dplyr)
library(lubridate)
library(caret)
library(rpart)
library(rpart.plot)
library(forecast)
kickstarter.df <- fread("./Data/ks-projects-201801.csv")
# change launched and dealine to date format
kickstarter.df$deadline <- ymd(kickstarter.df$deadline)
kickstarter.df$launched <- ymd_hms(kickstarter.df$launched)
kickstarter.df$launched <- as.Date(kickstarter.df$launched)
# create target column
kickstarter.df$successful <- ifelse(kickstarter.df$state == "successful", 1, 0)
# select and format relevant variables
kickstarter.full.df <- kickstarter.df %>% mutate("total_days" = deadline - launched) %>%
select(name, main_category, country, launched, deadline, total_days, usd_pledged_real, usd_goal_real, backers, state, successful) %>%
rename(category = main_category, pledged = usd_pledged_real, goal = usd_goal_real) %>%
filter(total_days <= 500)
kickstarter.full.df$total_days <- as.numeric(kickstarter.full.df$total_days, units="days")
# create data frame with only predictor variables
kickstarter.df <- kickstarter.full.df %>% select(category, country, total_days, goal, successful)
# partition data
set.seed(1)
train.index <- sample(1:nrow(kickstarter.df), nrow(kickstarter.df)*0.6)
train.df <- kickstarter.df[train.index, ]
valid.df <- kickstarter.df[-train.index, ]
################################# ggplots #####################################
# plot of only successful kickstarters
kickstarter.successful.df <- kickstarter.full.df %>% filter(successful == 1)
country_plot <- ggplot(data = kickstarter.successful.df) +
geom_point(aes(x = pledged, y = country, color = country)) +
labs(title = "Country Funding")
country_plot2 <- ggplot(data = kickstarter.successful.df, aes(country), position = position_stack(reverse = TRUE)) +
geom_bar() +
coord_flip() +
labs(title = "Top Countries")
category_plot <- ggplot(data = kickstarter.successful.df) +
geom_point(aes(x = pledged, y = category, color = category)) +
labs(title = "Categories Funding")
category_plot2 <- ggplot(data = kickstarter.successful.df, aes(category), position = position_stack(reverse = TRUE)) +
geom_bar() +
coord_flip() +
labs(title = "Top Categories")
days_plot <- ggplot(data =  subset(kickstarter.successful.df, total_days <= 50 & total_days > 10), aes(total_days)) +
geom_bar() +
labs(title = "Average Days")
########################## classification trees ################################
# default classification tree, optimized by pruning
default.ct <- rpart(successful ~ ., data = train.df, method = "class")
# plot tree
tree <- prp(default.ct, type = 1, extra = 1, varlen = -10)
# classification accuracy measure of the default tree
default.ct.point.pred <- predict(default.ct, valid.df, type = "class")
# generate confusion matrix for validation data
confusionMatrix <- confusionMatrix(default.ct.point.pred, factor(valid.df$successful))
fourfoldplot(confusionMatrix$table)
####################### multiple linear regression ##############################
# linear regression of success on all 4 predictors in the training set
kickstarter.lm <- lm(successful~., data = train.df)
options(scipen = 999)
summary(kickstarter.lm)
# make predictions on a new set.
kickstarter.lm.pred <- predict(kickstarter.lm, valid.df)
options(scipen = 999, digits = 3)
accuracy(kickstarter.lm.pred, valid.df$successful)
options(scipen=999, digits = 0)
# get the residuals
all.residuals <- valid.df$successful - kickstarter.lm.pred
hist(all.residuals, breaks = 25, xlab = "Residuals")
runApp()
